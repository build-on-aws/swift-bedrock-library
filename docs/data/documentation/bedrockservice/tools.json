{"metadata":{"role":"article","modules":[{"name":"BedrockService"}],"title":"Tools","roleHeading":"Article"},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/BedrockService\/documentation\/BedrockService\/Tools","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Enable function calling with foundation models"}],"hierarchy":{"paths":[["doc:\/\/BedrockService\/documentation\/BedrockService"]]},"primaryContentSections":[{"content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tools allow foundation models to call external functions, enabling them to access real-time data, perform calculations, and interact with external systems."}]},{"level":2,"type":"heading","anchor":"Basic-Tool-Usage","text":"Basic Tool Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define and use a simple tool:"}]},{"type":"codeListing","syntax":"swift","code":["let model: BedrockModel = .nova_lite","","guard model.hasConverseModality(.toolUse) else {","    throw MyError.incorrectModality(\"\\(model.name) does not support tools\")","}","","\/\/ Define the tool's input schema","let inputSchema = JSON([","    \"type\": \"object\",","    \"properties\": [","        \"sign\": [","            \"type\": \"string\",","            \"description\": \"Radio station call sign (e.g., WZPZ, WKRP)\"","        ]","    ],","    \"required\": [\"sign\"]","])","","\/\/ Create the tool","let tool = try Tool(","    name: \"top_song\",","    inputSchema: inputSchema,","    description: \"Get the most popular song on a radio station\"",")","","\/\/ Use the tool in a conversation","var builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"What is the most popular song on WZPZ?\")","    .withTool(tool)","","var reply = try await bedrock.converse(with: builder)","","\/\/ Handle tool use request","if let toolUse = try? reply.getToolUse() {","    let sign: String? = toolUse.input[\"sign\"]","    let result = getMostPopularSong(for: sign ?? \"\")","    ","    builder = try ConverseRequestBuilder(from: builder, with: reply)","        .withToolResult(result)","    ","    reply = try await bedrock.converse(with: builder)","}","","print(\"Assistant: \\(reply)\")"]},{"level":2,"type":"heading","anchor":"Multiple-Tools","text":"Multiple Tools"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add multiple tools to expand capabilities:"}]},{"type":"codeListing","syntax":"swift","code":["let weatherTool = try Tool(","    name: \"get_weather\",","    inputSchema: JSON([","        \"type\": \"object\",","        \"properties\": [","            \"location\": [\"type\": \"string\", \"description\": \"City name\"]","        ],","        \"required\": [\"location\"]","    ]),","    description: \"Get current weather for a location\"",")","","let calculatorTool = try Tool(","    name: \"calculate\",","    inputSchema: JSON([","        \"type\": \"object\", ","        \"properties\": [","            \"expression\": [\"type\": \"string\", \"description\": \"Math expression to evaluate\"]","        ],","        \"required\": [\"expression\"]","    ]),","    description: \"Perform mathematical calculations\"",")","","let builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"What's the weather in Paris and what's 15 * 23?\")","    .withTools([weatherTool, calculatorTool])"]},{"level":2,"type":"heading","anchor":"Tool-Result-Types","text":"Tool Result Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Return different types of data as tool results:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ String result","builder = try ConverseRequestBuilder(from: builder, with: reply)","    .withToolResult(\"Sunny, 22°C\")","","\/\/ JSON result","let weatherData = [\"temperature\": 22, \"condition\": \"sunny\"]","builder = try ConverseRequestBuilder(from: builder, with: reply)","    .withToolResult(weatherData)","","\/\/ Custom Codable type","struct WeatherInfo: Codable {","    let temperature: Int","    let condition: String","}","","let weather = WeatherInfo(temperature: 22, condition: \"sunny\")","builder = try ConverseRequestBuilder(from: builder, with: reply)","    .withToolResult(weather)"]},{"level":2,"type":"heading","anchor":"Interactive-Tool-Usage","text":"Interactive Tool Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Build an interactive system with multiple tool calls:"}]},{"type":"codeListing","syntax":"swift","code":["var builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"Introduce yourself and mention your available tools\")","    .withTools([weatherTool, calculatorTool])","","while true {","    let reply = try await bedrock.converse(with: builder)","    ","    if let toolUse = try? reply.getToolUse() {","        let result = handleToolUse(toolUse)","        builder = try ConverseRequestBuilder(from: builder, with: reply)","            .withToolResult(result)","    } else {","        print(\"Assistant: \\(reply)\")","        print(\"You: \")","        guard let prompt = readLine(), prompt != \"quit\" else { break }","        ","        builder = try ConverseRequestBuilder(from: builder, with: reply)","            .withPrompt(prompt)","    }","}","","func handleToolUse(_ toolUse: ToolUseBlock) -> String {","    switch toolUse.name {","    case \"get_weather\":","        let location: String? = toolUse.input[\"location\"]","        return getWeather(for: location ?? \"\")","    case \"calculate\":","        let expression: String? = toolUse.input[\"expression\"]","        return calculate(expression ?? \"\")","    default:","        return \"Unknown tool\"","    }","}"]},{"level":2,"type":"heading","anchor":"Streaming-with-Tools","text":"Streaming with Tools"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tools work seamlessly with streaming:"}]},{"type":"codeListing","syntax":"swift","code":["let stream = try await bedrock.converseStream(with: builder)","","for try await element in stream {","    switch element {","    case .text(_, let text):","        print(text, terminator: \"\")","    case .toolUse(let index, let toolUse):","        print(\"Tool requested: \\(toolUse.name)\")","    case .messageComplete(let message):","        \/\/ Handle tool use from complete message","        break","    default:","        break","    }","}"]},{"level":2,"type":"heading","anchor":"JSON-Schema-Helper","text":"JSON Schema Helper"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"JSON","type":"codeVoice"},{"type":"text","text":" struct provides convenient schema creation:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ From dictionary","let schema = JSON([","    \"type\": \"object\",","    \"properties\": [","        \"query\": [\"type\": \"string\"]","    ]","])","","\/\/ From JSON string","let jsonString = \"\"\"","{","    \"type\": \"object\",","    \"properties\": {","        \"location\": {\"type\": \"string\"},","        \"units\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]}","    },","    \"required\": [\"location\"]","}","\"\"\"","let schema = try JSON(from: jsonString)","","\/\/ Access values","let location: String? = toolUse.input[\"location\"]","let units: String? = toolUse.input[\"units\"]"]}],"kind":"content"}],"kind":"article","seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","doc:\/\/BedrockService\/documentation\/BedrockService\/Streaming"],"anchor":"Related-Documentation"},{"generated":true,"title":"Advanced Topics","identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Vision","doc:\/\/BedrockService\/documentation\/BedrockService\/Documents","doc:\/\/BedrockService\/documentation\/BedrockService\/Reasoning","doc:\/\/BedrockService\/documentation\/BedrockService\/Streaming"],"anchor":"Advanced-Topics"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bedrockservice\/tools"]}],"sections":[],"references":{"doc://BedrockService/documentation/BedrockService/Reasoning":{"url":"\/documentation\/bedrockservice\/reasoning","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Reasoning","abstract":[{"type":"text","text":"Access the model’s reasoning process"}],"type":"topic","role":"article","kind":"article","title":"Reasoning"},"doc://BedrockService/documentation/BedrockService/Converse":{"url":"\/documentation\/bedrockservice\/converse","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","abstract":[{"type":"text","text":"Build conversational AI applications with the Converse API"}],"type":"topic","role":"article","kind":"article","title":"Converse API"},"doc://BedrockService/documentation/BedrockService/Streaming":{"url":"\/documentation\/bedrockservice\/streaming","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Streaming","abstract":[{"type":"text","text":"Get real-time responses with streaming"}],"type":"topic","role":"article","kind":"article","title":"Streaming"},"doc://BedrockService/documentation/BedrockService/Documents":{"url":"\/documentation\/bedrockservice\/documents","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Documents","abstract":[{"type":"text","text":"Process documents with foundation models"}],"type":"topic","role":"article","kind":"article","title":"Documents"},"bedrock.png":{"variants":[{"url":"\/images\/BedrockService\/bedrock.png","traits":["1x","light"]}],"type":"image","identifier":"bedrock.png","alt":"BedrockService"},"doc://BedrockService/documentation/BedrockService/Vision":{"url":"\/documentation\/bedrockservice\/vision","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Vision","abstract":[{"type":"text","text":"Add images to your conversations"}],"type":"topic","role":"article","kind":"article","title":"Vision"},"doc://BedrockService/documentation/BedrockService":{"type":"topic","title":"BedrockService","url":"\/documentation\/bedrockservice","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService","role":"collection","images":[{"type":"icon","identifier":"bedrock.png"}],"kind":"symbol","abstract":[{"type":"text","text":"A Swift library for interacting with Amazon Bedrock foundation models"}]}}}