{"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"inlineContent":[{"type":"text","text":"Reasoning capabilities allow you to see how foundation models think through problems, providing transparency into their decision-making process."}],"type":"paragraph"},{"anchor":"Basic-Reasoning","level":2,"text":"Basic Reasoning","type":"heading"},{"inlineContent":[{"type":"text","text":"Enable reasoning to see the modelâ€™s thought process:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let model: BedrockModel = .claudev3_7_sonnet","","guard model.hasConverseModality(.reasoning) else {","    throw MyError.incorrectModality(\"\\(model.name) does not support reasoning\")","}","","let builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"Solve this math problem: If a train travels 60 mph for 2.5 hours, how far does it go?\")","    .withReasoning()","","let reply = try await bedrock.converse(with: builder)","","if let reasoning = try? reply.getReasoningBlock() {","    print(\"Reasoning: \\(reasoning.reasoning)\")","}","print(\"Answer: \\(reply)\")"]},{"type":"heading","text":"Reasoning with Token Limits","anchor":"Reasoning-with-Token-Limits","level":2},{"type":"paragraph","inlineContent":[{"text":"Control the length of reasoning output:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"Explain the causes of World War I\")","    .withReasoning(maxReasoningTokens: 1024)","","let reply = try await bedrock.converse(with: builder)"]},{"anchor":"Streaming-Reasoning","level":2,"text":"Streaming Reasoning","type":"heading"},{"inlineContent":[{"type":"text","text":"See reasoning unfold in real-time:"}],"type":"paragraph"},{"code":["let builder = try ConverseRequestBuilder(with model)","    .withPrompt(\"Plan a 7-day trip to Japan\")","    .withReasoning(maxReasoningTokens: 2048)","","let stream = try await bedrock.converseStream(with: builder)","","var reasoningIndexes: [Int] = []","var textIndexes: [Int] = []","","for try await element in stream {","    switch element {","    case .reasoning(let index, let reasoning):","        if !reasoningIndexes.contains(index) {","            reasoningIndexes.append(index)","            print(\"\\nðŸ¤” Reasoning: \")","        }","        print(reasoning, terminator: \"\")","        ","    case .text(let index, let text):","        if !textIndexes.contains(index) {","            textIndexes.append(index)","            print(\"\\nðŸ’¬ Response: \")","        }","        print(text, terminator: \"\")","        ","    case .messageComplete(_):","        print(\"\\n\")","        ","    default:","        break","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Complex-Problem-Solving","level":2,"text":"Complex Problem Solving","type":"heading"},{"inlineContent":[{"type":"text","text":"Use reasoning for multi-step problems:"}],"type":"paragraph"},{"code":["let builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"\"\"","        A company has 150 employees. 60% work in engineering, 25% in sales, ","        and the rest in administration. If engineering gets a 10% budget increase ","        and sales gets a 5% increase, what's the total percentage increase ","        in employee-related costs?","        \"\"\")","    .withReasoning()","    .withTemperature(0.1) \/\/ Lower temperature for more focused reasoning","","let reply = try await bedrock.converse(with: builder)","","if let reasoning = try? reply.getReasoningBlock() {","    print(\"Step-by-step reasoning:\")","    print(reasoning.reasoning)","    print(\"\\nFinal answer:\")","}","print(reply)"],"syntax":"swift","type":"codeListing"},{"anchor":"Reasoning-in-Conversations","level":2,"text":"Reasoning in Conversations","type":"heading"},{"inlineContent":[{"type":"text","text":"Maintain reasoning across conversation turns:"}],"type":"paragraph"},{"code":["var builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"I need to choose between two job offers. Can you help me think through this?\")","    .withReasoning()","","var reply = try await bedrock.converse(with: builder)","","if let reasoning = try? reply.getReasoningBlock() {","    print(\"Initial reasoning: \\(reasoning.reasoning)\")","}","print(\"Assistant: \\(reply)\")","","\/\/ Continue with more details","builder = try ConverseRequestBuilder(from: builder, with: reply)","    .withPrompt(\"\"\"","        Job A: $80k salary, great benefits, 30-minute commute, startup environment","        Job B: $75k salary, okay benefits, 10-minute commute, established company","        \"\"\")","    .withReasoning()","","reply = try await bedrock.converse(with: builder)","","if let reasoning = try? reply.getReasoningBlock() {","    print(\"Analysis reasoning: \\(reasoning.reasoning)\")","}","print(\"Assistant: \\(reply)\")"],"syntax":"swift","type":"codeListing"},{"anchor":"Reasoning-with-Tools","level":2,"text":"Reasoning with Tools","type":"heading"},{"inlineContent":[{"type":"text","text":"Combine reasoning with function calling:"}],"type":"paragraph"},{"code":["let calculatorTool = try Tool(","    name: \"calculate\",","    inputSchema: JSON([","        \"type\": \"object\",","        \"properties\": [","            \"expression\": [\"type\": \"string\"]","        ],","        \"required\": [\"expression\"]","    ]),","    description: \"Perform mathematical calculations\"",")","","let builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"Calculate the compound interest on $1000 at 5% annually for 3 years\")","    .withTool(calculatorTool)","    .withReasoning()","","let reply = try await bedrock.converse(with: builder)","","\/\/ The model will reason about the problem and potentially use the calculator tool","if let reasoning = try? reply.getReasoningBlock() {","    print(\"Reasoning: \\(reasoning.reasoning)\")","}","","if let toolUse = try? reply.getToolUse() {","    let expression: String? = toolUse.input[\"expression\"]","    let result = calculate(expression ?? \"\")","    ","    let finalBuilder = try ConverseRequestBuilder(from: builder, with: reply)","        .withToolResult(result)","        .withReasoning()","    ","    let finalReply = try await bedrock.converse(with: finalBuilder)","    print(\"Final answer: \\(finalReply)\")","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/BedrockService\/documentation\/BedrockService"]]},"metadata":{"title":"Reasoning","roleHeading":"Article","modules":[{"name":"BedrockService"}],"role":"article"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","abstract":[{"text":"Access the modelâ€™s reasoning process","type":"text"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bedrockservice\/reasoning"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/BedrockService\/documentation\/BedrockService\/Reasoning"},"seeAlsoSections":[{"title":"Related Documentation","anchor":"Related-Documentation","identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","doc:\/\/BedrockService\/documentation\/BedrockService\/Streaming","doc:\/\/BedrockService\/documentation\/BedrockService\/Tools"]},{"title":"Advanced Topics","anchor":"Advanced-Topics","identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Tools","doc:\/\/BedrockService\/documentation\/BedrockService\/Vision","doc:\/\/BedrockService\/documentation\/BedrockService\/Documents","doc:\/\/BedrockService\/documentation\/BedrockService\/Streaming"],"generated":true}],"references":{"doc://BedrockService/documentation/BedrockService/Converse":{"title":"Converse API","url":"\/documentation\/bedrockservice\/converse","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","type":"topic","role":"article","kind":"article","abstract":[{"text":"Build conversational AI applications with the Converse API","type":"text"}]},"bedrock.png":{"type":"image","alt":"BedrockService","variants":[{"url":"\/images\/BedrockService\/bedrock.png","traits":["1x","light"]}],"identifier":"bedrock.png"},"doc://BedrockService/documentation/BedrockService/Vision":{"kind":"article","type":"topic","url":"\/documentation\/bedrockservice\/vision","abstract":[{"type":"text","text":"Add images to your conversations"}],"role":"article","title":"Vision","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Vision"},"doc://BedrockService/documentation/BedrockService":{"kind":"symbol","type":"topic","url":"\/documentation\/bedrockservice","abstract":[{"text":"A Swift library for interacting with Amazon Bedrock foundation models","type":"text"}],"role":"collection","title":"BedrockService","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService","images":[{"type":"icon","identifier":"bedrock.png"}]},"doc://BedrockService/documentation/BedrockService/Documents":{"kind":"article","type":"topic","url":"\/documentation\/bedrockservice\/documents","abstract":[{"type":"text","text":"Process documents with foundation models"}],"role":"article","title":"Documents","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Documents"},"doc://BedrockService/documentation/BedrockService/Tools":{"kind":"article","type":"topic","url":"\/documentation\/bedrockservice\/tools","abstract":[{"type":"text","text":"Enable function calling with foundation models"}],"role":"article","title":"Tools","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Tools"},"doc://BedrockService/documentation/BedrockService/Streaming":{"title":"Streaming","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Streaming","url":"\/documentation\/bedrockservice\/streaming","type":"topic","role":"article","abstract":[{"text":"Get real-time responses with streaming","type":"text"}],"kind":"article"}}}