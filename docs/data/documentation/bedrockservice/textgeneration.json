{"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","doc:\/\/BedrockService\/documentation\/BedrockService\/Embeddings"],"anchor":"Related-Documentation","title":"Related Documentation"},{"identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","doc:\/\/BedrockService\/documentation\/BedrockService\/ImageGeneration","doc:\/\/BedrockService\/documentation\/BedrockService\/Embeddings"],"generated":true,"anchor":"Core-Features","title":"Core Features"}],"sections":[],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"The InvokeModel API provides direct access to foundation models for text completion tasks. This is useful for simple text generation without the conversational context of the Converse API.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Basic Text Generation","anchor":"Basic-Text-Generation"},{"inlineContent":[{"text":"Generate text from a prompt:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let model: BedrockModel = .nova_micro","","guard model.hasTextModality() else {","    throw MyError.incorrectModality(\"\\(model.name) does not support text generation\")","}","","let textCompletion = try await bedrock.completeText(","    \"Write a story about a space adventure\",","    with: model",")","","print(textCompletion.completion)"]},{"level":2,"type":"heading","text":"Generation Parameters","anchor":"Generation-Parameters"},{"inlineContent":[{"text":"Control text generation behavior:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let textCompletion = try await bedrock.completeText(","    \"Explain quantum computing in simple terms\",","    with: model,","    maxTokens: 1000,","    temperature: 0.7,","    topP: 0.9,","    topK: 250,","    stopSequences: [\"THE END\", \"CONCLUSION\"]",")","","print(textCompletion.completion)"]},{"level":3,"type":"heading","text":"Parameter Descriptions","anchor":"Parameter-Descriptions"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"maxTokens"}],"type":"strong"},{"type":"text","text":": Maximum number of tokens to generate"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"temperature"}],"type":"strong"},{"type":"text","text":": Controls randomness (0.0 = deterministic, 1.0 = very random)"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"topP"}],"type":"strong"},{"text":": Nucleus sampling threshold (0.0-1.0)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"topK"}]},{"text":": Limits vocabulary to top K tokens","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"stopSequences","type":"text"}]},{"text":": Strings that stop generation when encountered","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"type":"heading","text":"Model-Specific Parameters","anchor":"Model-Specific-Parameters"},{"inlineContent":[{"type":"text","text":"Different models support different parameters:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Check what parameters a model supports","if let textModality = model.modality as? TextModality {","    let params = textModality.getParameters()","    ","    if params.temperature.isSupported {","        print(\"Temperature range: \\(params.temperature.minValue)-\\(params.temperature.maxValue ?? 1.0)\")","    }","    ","    if params.topK.isSupported {","        print(\"TopK supported with max: \\(params.topK.maxValue ?? \"unlimited\")\")","    } else {","        print(\"TopK not supported by this model\")","    }","}"]},{"level":2,"type":"heading","text":"Use Cases","anchor":"Use-Cases"},{"anchor":"Creative-Writing","type":"heading","text":"Creative Writing","level":3},{"code":["let story = try await bedrock.completeText(","    \"Once upon a time in a magical forest\",","    with: model,","    temperature: 0.9, \/\/ High creativity","    maxTokens: 500",")"],"syntax":"swift","type":"codeListing"},{"anchor":"Technical-Documentation","type":"heading","text":"Technical Documentation","level":3},{"syntax":"swift","type":"codeListing","code":["let documentation = try await bedrock.completeText(","    \"## API Reference\\n\\nThe authenticate() function\",","    with: model,","    temperature: 0.3, \/\/ Low creativity, more factual","    maxTokens: 800",")"]},{"anchor":"Code-Generation","type":"heading","text":"Code Generation","level":3},{"code":["let code = try await bedrock.completeText(","    \"\/\/ Swift function to calculate fibonacci numbers\\nfunc fibonacci(\",","    with: model,","    temperature: 0.1, \/\/ Very deterministic","    stopSequences: [\"\\n\\n\", \"\/\/ End\"]",")"],"syntax":"swift","type":"codeListing"},{"level":3,"type":"heading","text":"Structured Output","anchor":"Structured-Output"},{"syntax":"swift","type":"codeListing","code":["let jsonOutput = try await bedrock.completeText(","    \"Generate a JSON object representing a user profile:\",","    with: model,","    temperature: 0.2,","    stopSequences: [\"}\"],","    maxTokens: 200",")"]},{"level":2,"type":"heading","text":"Error Handling","anchor":"Error-Handling"},{"inlineContent":[{"type":"text","text":"Handle parameter validation and model errors:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["do {","    let completion = try await bedrock.completeText(","        \"Generate text\",","        with: model,","        temperature: 2.0 \/\/ Invalid temperature","    )","} catch BedrockServiceError.parameterOutOfRange(let param, let value, let range) {","    print(\"Parameter \\(param) value \\(value) outside range: \\(range)\")","} catch BedrockServiceError.notSupported(let feature) {","    print(\"Feature not supported: \\(feature)\")","} catch {","    print(\"Text generation failed: \\(error)\")","}"]},{"level":2,"type":"heading","text":"Comparing with Converse API","anchor":"Comparing-with-Converse-API"},{"header":"row","type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Feature","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"InvokeModel (Text)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Converse API","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Conversation history","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"❌","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"✅","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"System prompts","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"❌","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"✅","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Tool calling","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"❌","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"✅","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Vision support","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"❌","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"✅","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Streaming","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"❌","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"✅","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Simple text completion","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"✅","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"✅","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Lower latency","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"✅","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"❌","type":"text"}]}]]]},{"level":2,"type":"heading","text":"When to Use Text Generation","anchor":"When-to-Use-Text-Generation"},{"inlineContent":[{"type":"text","text":"Use the InvokeModel text generation API when you need:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Simple, one-shot text completion","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Lower latency responses","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Direct control over model parameters","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"No conversation context required","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Use the Converse API when you need:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Multi-turn conversations","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"System prompts and instructions","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Tool calling capabilities","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Vision or document processing","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bedrockservice\/textgeneration"]}],"hierarchy":{"paths":[["doc:\/\/BedrockService\/documentation\/BedrockService"]]},"metadata":{"role":"article","modules":[{"name":"BedrockService"}],"title":"Text Generation","roleHeading":"Article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/BedrockService\/documentation\/BedrockService\/TextGeneration"},"abstract":[{"type":"text","text":"Generate text using the InvokeModel API"}],"references":{"doc://BedrockService/documentation/BedrockService":{"url":"\/documentation\/bedrockservice","images":[{"identifier":"bedrock.png","type":"icon"}],"type":"topic","kind":"symbol","title":"BedrockService","abstract":[{"text":"A Swift library for interacting with Amazon Bedrock foundation models","type":"text"}],"role":"collection","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService"},"bedrock.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/BedrockService\/bedrock.png"}],"alt":"BedrockService","identifier":"bedrock.png"},"doc://BedrockService/documentation/BedrockService/ImageGeneration":{"url":"\/documentation\/bedrockservice\/imagegeneration","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Create and modify images with foundation models"}],"identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/ImageGeneration","title":"Image Generation"},"doc://BedrockService/documentation/BedrockService/Converse":{"url":"\/documentation\/bedrockservice\/converse","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Build conversational AI applications with the Converse API"}],"identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","title":"Converse API"},"doc://BedrockService/documentation/BedrockService/Embeddings":{"kind":"article","type":"topic","url":"\/documentation\/bedrockservice\/embeddings","role":"article","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Embeddings","abstract":[{"text":"Generate vector embeddings for semantic analysis","type":"text"}],"title":"Embeddings"}}}