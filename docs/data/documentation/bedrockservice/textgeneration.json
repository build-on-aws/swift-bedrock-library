{"hierarchy":{"paths":[["doc:\/\/BedrockService\/documentation\/BedrockService"]]},"variants":[{"paths":["\/documentation\/bedrockservice\/textgeneration"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/BedrockService\/documentation\/BedrockService\/TextGeneration","interfaceLanguage":"swift"},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","doc:\/\/BedrockService\/documentation\/BedrockService\/Embeddings"],"title":"Related Documentation","anchor":"Related-Documentation"},{"identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","doc:\/\/BedrockService\/documentation\/BedrockService\/ImageGeneration","doc:\/\/BedrockService\/documentation\/BedrockService\/Embeddings"],"generated":true,"title":"Core Features","anchor":"Core-Features"}],"metadata":{"title":"Text Generation","modules":[{"name":"BedrockService"}],"roleHeading":"Article","role":"article"},"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Generate text using the InvokeModel API"}],"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"The InvokeModel API provides direct access to foundation models for text completion tasks. This is useful for simple text generation without the conversational context of the Converse API.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Basic-Text-Generation","text":"Basic Text Generation"},{"inlineContent":[{"text":"Generate text from a prompt:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let model: BedrockModel = .nova_micro","","guard model.hasTextModality() else {","    throw MyError.incorrectModality(\"\\(model.name) does not support text generation\")","}","","let textCompletion = try await bedrock.completeText(","    \"Write a story about a space adventure\",","    with: model",")","","print(textCompletion.completion)"]},{"type":"heading","text":"Generation Parameters","level":2,"anchor":"Generation-Parameters"},{"type":"paragraph","inlineContent":[{"text":"Control text generation behavior:","type":"text"}]},{"code":["let textCompletion = try await bedrock.completeText(","    \"Explain quantum computing in simple terms\",","    with: model,","    maxTokens: 1000,","    temperature: 0.7,","    topP: 0.9,","    topK: 250,","    stopSequences: [\"THE END\", \"CONCLUSION\"]",")","","print(textCompletion.completion)"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Parameter Descriptions","level":3,"anchor":"Parameter-Descriptions"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"maxTokens"}],"type":"strong"},{"text":": Maximum number of tokens to generate","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"temperature"}],"type":"strong"},{"text":": Controls randomness (0.0 = deterministic, 1.0 = very random)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"topP","type":"text"}],"type":"strong"},{"text":": Nucleus sampling threshold (0.0-1.0)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"topK","type":"text"}],"type":"strong"},{"text":": Limits vocabulary to top K tokens","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"stopSequences","type":"text"}],"type":"strong"},{"text":": Strings that stop generation when encountered","type":"text"}]}]}]},{"type":"heading","level":2,"anchor":"Model-Specific-Parameters","text":"Model-Specific Parameters"},{"inlineContent":[{"type":"text","text":"Different models support different parameters:"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Check what parameters a model supports","if let textModality = model.modality as? TextModality {","    let params = textModality.getParameters()","    ","    if params.temperature.isSupported {","        print(\"Temperature range: \\(params.temperature.minValue)-\\(params.temperature.maxValue ?? 1.0)\")","    }","    ","    if params.topK.isSupported {","        print(\"TopK supported with max: \\(params.topK.maxValue ?? \"unlimited\")\")","    } else {","        print(\"TopK not supported by this model\")","    }","}"],"syntax":"swift"},{"level":2,"anchor":"Use-Cases","text":"Use Cases","type":"heading"},{"level":3,"anchor":"Creative-Writing","text":"Creative Writing","type":"heading"},{"type":"codeListing","code":["let story = try await bedrock.completeText(","    \"Once upon a time in a magical forest\",","    with: model,","    temperature: 0.9, \/\/ High creativity","    maxTokens: 500",")"],"syntax":"swift"},{"level":3,"anchor":"Technical-Documentation","text":"Technical Documentation","type":"heading"},{"type":"codeListing","code":["let documentation = try await bedrock.completeText(","    \"## API Reference\\n\\nThe authenticate() function\",","    with: model,","    temperature: 0.3, \/\/ Low creativity, more factual","    maxTokens: 800",")"],"syntax":"swift"},{"level":3,"anchor":"Code-Generation","text":"Code Generation","type":"heading"},{"type":"codeListing","code":["let code = try await bedrock.completeText(","    \"\/\/ Swift function to calculate fibonacci numbers\\nfunc fibonacci(\",","    with: model,","    temperature: 0.1, \/\/ Very deterministic","    stopSequences: [\"\\n\\n\", \"\/\/ End\"]",")"],"syntax":"swift"},{"level":3,"anchor":"Structured-Output","text":"Structured Output","type":"heading"},{"type":"codeListing","code":["let jsonOutput = try await bedrock.completeText(","    \"Generate a JSON object representing a user profile:\",","    with: model,","    temperature: 0.2,","    stopSequences: [\"}\"],","    maxTokens: 200",")"],"syntax":"swift"},{"level":2,"anchor":"Error-Handling","text":"Error Handling","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Handle parameter validation and model errors:","type":"text"}]},{"type":"codeListing","code":["do {","    let completion = try await bedrock.completeText(","        \"Generate text\",","        with: model,","        temperature: 2.0 \/\/ Invalid temperature","    )","} catch BedrockServiceError.parameterOutOfRange(let param, let value, let range) {","    print(\"Parameter \\(param) value \\(value) outside range: \\(range)\")","} catch BedrockServiceError.notSupported(let feature) {","    print(\"Feature not supported: \\(feature)\")","} catch {","    print(\"Text generation failed: \\(error)\")","}"],"syntax":"swift"},{"level":2,"anchor":"Comparing-with-Converse-API","text":"Comparing with Converse API","type":"heading"},{"header":"row","type":"table","rows":[[[{"inlineContent":[{"type":"text","text":"Feature"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"InvokeModel (Text)"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Converse API"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"Conversation history"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"❌"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"System prompts"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"❌"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"text","text":"Tool calling"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"❌"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"✅"}],"type":"paragraph"}]],[[{"inlineContent":[{"text":"Vision support","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"❌","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"✅","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"Streaming","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"❌"}],"type":"paragraph"}],[{"inlineContent":[{"text":"✅","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"text":"Simple text completion","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"✅","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"✅","type":"text"}]}]],[[{"inlineContent":[{"type":"text","text":"Lower latency"}],"type":"paragraph"}],[{"inlineContent":[{"text":"✅","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"❌","type":"text"}],"type":"paragraph"}]]]},{"type":"heading","text":"When to Use Text Generation","level":2,"anchor":"When-to-Use-Text-Generation"},{"type":"paragraph","inlineContent":[{"text":"Use the InvokeModel text generation API when you need:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Simple, one-shot text completion"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Lower latency responses","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Direct control over model parameters","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"No conversation context required","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Use the Converse API when you need:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Multi-turn conversations","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"System prompts and instructions","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Tool calling capabilities","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Vision or document processing","type":"text"}]}]}],"type":"unorderedList"}],"kind":"content"}],"references":{"doc://BedrockService/documentation/BedrockService/Embeddings":{"title":"Embeddings","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Embeddings","url":"\/documentation\/bedrockservice\/embeddings","type":"topic","role":"article","abstract":[{"text":"Generate vector embeddings for semantic analysis","type":"text"}],"kind":"article"},"doc://BedrockService/documentation/BedrockService/Converse":{"title":"Converse API","url":"\/documentation\/bedrockservice\/converse","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","type":"topic","role":"article","kind":"article","abstract":[{"text":"Build conversational AI applications with the Converse API","type":"text"}]},"bedrock.png":{"variants":[{"url":"\/images\/BedrockService\/bedrock.png","traits":["1x","light"]}],"type":"image","identifier":"bedrock.png","alt":"BedrockService"},"doc://BedrockService/documentation/BedrockService":{"kind":"symbol","type":"topic","url":"\/documentation\/bedrockservice","abstract":[{"text":"A Swift library for interacting with Amazon Bedrock foundation models","type":"text"}],"role":"collection","title":"BedrockService","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService","images":[{"type":"icon","identifier":"bedrock.png"}]},"doc://BedrockService/documentation/BedrockService/ImageGeneration":{"type":"topic","url":"\/documentation\/bedrockservice\/imagegeneration","kind":"article","abstract":[{"text":"Create and modify images with foundation models","type":"text"}],"role":"article","title":"Image Generation","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/ImageGeneration"}}}