{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/BedrockService\/documentation\/BedrockService\/Streaming"},"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Streaming allows you to receive model responses in real-time as they’re generated, providing a better user experience for interactive applications."}],"type":"paragraph"},{"level":2,"text":"Basic Streaming","anchor":"Basic-Streaming","type":"heading"},{"inlineContent":[{"type":"text","text":"Use the same "},{"code":"ConverseRequestBuilder","type":"codeVoice"},{"type":"text","text":" with "},{"code":"converseStream","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["let model: BedrockModel = .nova_lite","","guard model.hasConverseModality(.streaming) else {","    throw MyError.incorrectModality(\"\\(model.name) does not support streaming\")","}","","let builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"Tell me about rainbows\")","","let reply = try await bedrock.converseStream(with: builder)","","for try await element in reply.stream {","    switch element {","    case .messageStart(let role):","        print(\"Message started with role: \\(role)\")","        ","    case .text(_, let text):","        print(text, terminator: \"\")","        ","    case .messageComplete(_):","        print(\"\\n\")","        ","    case .metaData(let metaData):","        print(\"Metadata: \\(metaData)\")","        ","    default:","        break","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Stream Elements","anchor":"Stream-Elements","type":"heading"},{"inlineContent":[{"type":"text","text":"The stream provides different types of elements:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":".messageStart(Role)","type":"codeVoice"},{"type":"text","text":" - Beginning of a message"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":".text(Int, String)","type":"codeVoice"},{"type":"text","text":" - Partial text content with index"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":".reasoning(Int, String)","type":"codeVoice"},{"type":"text","text":" - Partial reasoning content with index"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":".toolUse(Int, ToolUseBlock)","type":"codeVoice"},{"type":"text","text":" - Complete tool use response"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":".messageComplete(Message)","type":"codeVoice"},{"type":"text","text":" - Complete message with all content"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":".metaData(ResponseMetadata)","type":"codeVoice"},{"type":"text","text":" - Response metadata including token usage"}],"type":"paragraph"}]}]},{"level":2,"text":"Interactive Chat Loop","anchor":"Interactive-Chat-Loop","type":"heading"},{"inlineContent":[{"type":"text","text":"Build an interactive chat application:"}],"type":"paragraph"},{"code":["var builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"Introduce yourself\")","","while true {","    let stream = try await bedrock.converseStream(with: builder)","    var assistantMessage: Message = Message(\"empty\")","    ","    for try await element in stream {","        switch element {","        case .text(_, let text):","            print(text, terminator: \"\")","            ","        case .messageComplete(let message):","            assistantMessage = message","            print(\"\\n\")","            ","        default:","            break","        }","    }","    ","    print(\"You: \")","    guard let prompt = readLine(), prompt != \"quit\" else { break }","    ","    builder = try ConverseRequestBuilder(from: builder, with: assistantMessage)","        .withPrompt(prompt)","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Low-Level Stream Access","anchor":"Low-Level-Stream-Access","type":"heading"},{"inlineContent":[{"type":"text","text":"For maximum control, access the raw AWS SDK stream:"}],"type":"paragraph"},{"code":["let reply = try await bedrock.converseStream(with: builder)","\/\/ Access reply.rawStream for the low-level AWS SDK stream"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/BedrockService\/documentation\/BedrockService"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bedrockservice\/streaming"]}],"metadata":{"role":"article","modules":[{"name":"BedrockService"}],"title":"Streaming","roleHeading":"Article"},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Get real-time responses with streaming"}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","doc:\/\/BedrockService\/documentation\/BedrockService\/Tools","doc:\/\/BedrockService\/documentation\/BedrockService\/Reasoning"],"anchor":"Related-Documentation"},{"title":"Advanced Topics","identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Tools","doc:\/\/BedrockService\/documentation\/BedrockService\/Vision","doc:\/\/BedrockService\/documentation\/BedrockService\/Documents","doc:\/\/BedrockService\/documentation\/BedrockService\/Reasoning"],"anchor":"Advanced-Topics","generated":true}],"sections":[],"references":{"doc://BedrockService/documentation/BedrockService/Vision":{"url":"\/documentation\/bedrockservice\/vision","type":"topic","kind":"article","title":"Vision","abstract":[{"text":"Add images to your conversations","type":"text"}],"role":"article","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Vision"},"doc://BedrockService/documentation/BedrockService/Documents":{"url":"\/documentation\/bedrockservice\/documents","title":"Documents","kind":"article","abstract":[{"text":"Process documents with foundation models","type":"text"}],"role":"article","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Documents","type":"topic"},"bedrock.png":{"alt":"BedrockService","variants":[{"url":"\/images\/BedrockService\/bedrock.png","traits":["1x","light"]}],"identifier":"bedrock.png","type":"image"},"doc://BedrockService/documentation/BedrockService":{"url":"\/documentation\/bedrockservice","images":[{"identifier":"bedrock.png","type":"icon"}],"type":"topic","kind":"symbol","title":"BedrockService","abstract":[{"text":"A Swift library for interacting with Amazon Bedrock foundation models","type":"text"}],"role":"collection","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService"},"doc://BedrockService/documentation/BedrockService/Converse":{"url":"\/documentation\/bedrockservice\/converse","type":"topic","kind":"article","role":"article","abstract":[{"type":"text","text":"Build conversational AI applications with the Converse API"}],"identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","title":"Converse API"},"doc://BedrockService/documentation/BedrockService/Tools":{"type":"topic","title":"Tools","kind":"article","role":"article","abstract":[{"type":"text","text":"Enable function calling with foundation models"}],"identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Tools","url":"\/documentation\/bedrockservice\/tools"},"doc://BedrockService/documentation/BedrockService/Reasoning":{"title":"Reasoning","kind":"article","type":"topic","role":"article","abstract":[{"text":"Access the model’s reasoning process","type":"text"}],"identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Reasoning","url":"\/documentation\/bedrockservice\/reasoning"}}}