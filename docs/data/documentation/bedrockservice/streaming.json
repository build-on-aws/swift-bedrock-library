{"hierarchy":{"paths":[["doc:\/\/BedrockService\/documentation\/BedrockService"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","doc:\/\/BedrockService\/documentation\/BedrockService\/Tools","doc:\/\/BedrockService\/documentation\/BedrockService\/Reasoning"],"title":"Related Documentation","anchor":"Related-Documentation"},{"identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Tools","doc:\/\/BedrockService\/documentation\/BedrockService\/Vision","doc:\/\/BedrockService\/documentation\/BedrockService\/Documents","doc:\/\/BedrockService\/documentation\/BedrockService\/Reasoning"],"title":"Advanced Topics","generated":true,"anchor":"Advanced-Topics"}],"identifier":{"url":"doc:\/\/BedrockService\/documentation\/BedrockService\/Streaming","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bedrockservice\/streaming"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"Streaming allows you to receive model responses in real-time as they’re generated, providing a better user experience for interactive applications.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Basic Streaming","anchor":"Basic-Streaming","type":"heading"},{"inlineContent":[{"text":"Use the same ","type":"text"},{"code":"ConverseRequestBuilder","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"converseStream","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let model: BedrockModel = .nova_lite","","guard model.hasConverseModality(.streaming) else {","    throw MyError.incorrectModality(\"\\(model.name) does not support streaming\")","}","","let builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"Tell me about rainbows\")","","let reply = try await bedrock.converseStream(with: builder)","","for try await element in reply.stream {","    switch element {","    case .messageStart(let role):","        print(\"Message started with role: \\(role)\")","        ","    case .text(_, let text):","        print(text, terminator: \"\")","        ","    case .messageComplete(_):","        print(\"\\n\")","        ","    case .metaData(let metaData):","        print(\"Metadata: \\(metaData)\")","        ","    default:","        break","    }","}"]},{"level":2,"text":"Stream Elements","anchor":"Stream-Elements","type":"heading"},{"inlineContent":[{"text":"The stream provides different types of elements:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":".messageStart(Role)","type":"codeVoice"},{"text":" - Beginning of a message","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":".text(Int, String)","type":"codeVoice"},{"text":" - Partial text content with index","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":".reasoning(Int, String)","type":"codeVoice"},{"text":" - Partial reasoning content with index","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":".toolUse(Int, ToolUseBlock)","type":"codeVoice"},{"text":" - Complete tool use response","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":".messageComplete(Message)","type":"codeVoice"},{"text":" - Complete message with all content","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":".metaData(ResponseMetadata)","type":"codeVoice"},{"text":" - Response metadata including token usage","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"text":"Interactive Chat Loop","anchor":"Interactive-Chat-Loop","type":"heading"},{"inlineContent":[{"text":"Build an interactive chat application:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var builder = try ConverseRequestBuilder(with: model)","    .withPrompt(\"Introduce yourself\")","","while true {","    let stream = try await bedrock.converseStream(with: builder)","    var assistantMessage: Message = Message(\"empty\")","    ","    for try await element in stream {","        switch element {","        case .text(_, let text):","            print(text, terminator: \"\")","            ","        case .messageComplete(let message):","            assistantMessage = message","            print(\"\\n\")","            ","        default:","            break","        }","    }","    ","    print(\"You: \")","    guard let prompt = readLine(), prompt != \"quit\" else { break }","    ","    builder = try ConverseRequestBuilder(from: builder, with: assistantMessage)","        .withPrompt(prompt)","}"]},{"level":2,"text":"Low-Level Stream Access","anchor":"Low-Level-Stream-Access","type":"heading"},{"inlineContent":[{"text":"For maximum control, access the raw AWS SDK stream:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let reply = try await bedrock.converseStream(with: builder)","\/\/ Access reply.rawStream for the low-level AWS SDK stream"]}]}],"kind":"article","metadata":{"modules":[{"name":"BedrockService"}],"roleHeading":"Article","role":"article","title":"Streaming"},"abstract":[{"text":"Get real-time responses with streaming","type":"text"}],"references":{"doc://BedrockService/documentation/BedrockService/Vision":{"url":"\/documentation\/bedrockservice\/vision","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Vision","abstract":[{"type":"text","text":"Add images to your conversations"}],"type":"topic","role":"article","kind":"article","title":"Vision"},"doc://BedrockService/documentation/BedrockService/Documents":{"url":"\/documentation\/bedrockservice\/documents","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Documents","abstract":[{"type":"text","text":"Process documents with foundation models"}],"type":"topic","role":"article","kind":"article","title":"Documents"},"bedrock.png":{"type":"image","identifier":"bedrock.png","alt":"BedrockService","variants":[{"traits":["1x","light"],"url":"\/images\/BedrockService\/bedrock.png"}]},"doc://BedrockService/documentation/BedrockService":{"type":"topic","title":"BedrockService","url":"\/documentation\/bedrockservice","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService","role":"collection","images":[{"type":"icon","identifier":"bedrock.png"}],"kind":"symbol","abstract":[{"type":"text","text":"A Swift library for interacting with Amazon Bedrock foundation models"}]},"doc://BedrockService/documentation/BedrockService/Converse":{"url":"\/documentation\/bedrockservice\/converse","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","abstract":[{"type":"text","text":"Build conversational AI applications with the Converse API"}],"type":"topic","role":"article","kind":"article","title":"Converse API"},"doc://BedrockService/documentation/BedrockService/Reasoning":{"url":"\/documentation\/bedrockservice\/reasoning","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Reasoning","abstract":[{"type":"text","text":"Access the model’s reasoning process"}],"type":"topic","role":"article","kind":"article","title":"Reasoning"},"doc://BedrockService/documentation/BedrockService/Tools":{"type":"topic","title":"Tools","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Tools","url":"\/documentation\/bedrockservice\/tools","role":"article","kind":"article","abstract":[{"text":"Enable function calling with foundation models","type":"text"}]}}}