{"hierarchy":{"paths":[["doc:\/\/BedrockService\/documentation\/BedrockService"]]},"metadata":{"role":"article","title":"Adding Models","roleHeading":"Article","modules":[{"name":"BedrockService"}]},"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"BedrockService is designed to be extensible. You can add support for new foundation models by implementing the appropriate modality protocols and creating BedrockModel instances.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Adding Converse-Only Models","anchor":"Adding-Converse-Only-Models","type":"heading"},{"inlineContent":[{"text":"For models that only support the Converse API, use ","type":"text"},{"code":"StandardConverse","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["extension BedrockModel {","    public static let new_bedrock_model = BedrockModel(","        id: \"family.model-id-v1:0\",","        name: \"New Model Name\",","        modality: StandardConverse(","            parameters: ConverseParameters(","                temperature: Parameter(.temperature, minValue: 0, maxValue: 1, defaultValue: 0.3),","                maxTokens: Parameter(.maxTokens, minValue: 1, maxValue: nil, defaultValue: nil),","                topP: Parameter(.topP, minValue: 0.01, maxValue: 0.99, defaultValue: 0.75),","                stopSequences: StopSequenceParams(maxSequences: nil, defaultValue: []),","                maxPromptSize: nil","            ),","            features: [.textGeneration, .systemPrompts, .document, .toolUse]","        )","    )","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Converse Features","anchor":"Converse-Features","type":"heading"},{"inlineContent":[{"text":"Specify which features the model supports:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":".textGeneration"},{"type":"text","text":" - Basic text generation"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":".systemPrompts"},{"type":"text","text":" - System message support"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":".vision"},{"type":"text","text":" - Image input processing"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":".document"},{"type":"text","text":" - Document input processing"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":".toolUse"},{"type":"text","text":" - Function calling"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":".streaming"},{"type":"text","text":" - Real-time response streaming"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":".reasoning"},{"type":"text","text":" - Reasoning output"}],"type":"paragraph"}]}]},{"level":2,"text":"Adding Text Generation Models","anchor":"Adding-Text-Generation-Models","type":"heading"},{"inlineContent":[{"text":"For models that need custom InvokeModel support, implement the required protocols:","type":"text"}],"type":"paragraph"},{"level":3,"text":"Step 1: Create Request\/Response Structures","anchor":"Step-1-Create-RequestResponse-Structures","type":"heading"},{"code":["public struct LlamaRequestBody: BedrockBodyCodable {","    let prompt: String","    let max_gen_len: Int","    let temperature: Double","    let top_p: Double","","    public init(prompt: String, maxTokens: Int = 512, temperature: Double = 0.5) {","        self.prompt = \"<|begin_of_text|><|start_header_id|>user<|end_header_id|>\\(prompt)<|eot_id|><|start_header_id|>assistant<|end_header_id|>\"","        self.max_gen_len = maxTokens","        self.temperature = temperature","        self.top_p = 0.9","    }","}","","struct LlamaResponseBody: ContainsTextCompletion {","    let generation: String","    let prompt_token_count: Int","    let generation_token_count: Int","    let stop_reason: String","","    public func getTextCompletion() throws -> TextCompletion {","        TextCompletion(generation)","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Step 2: Implement TextModality","anchor":"Step-2-Implement-TextModality","type":"heading"},{"code":["struct LlamaText: TextModality {","    let parameters: TextGenerationParameters","","    init(parameters: TextGenerationParameters) {","        self.parameters = parameters","    }","","    func getName() -> String { \"Llama Text Generation\" }","","    func getParameters() -> TextGenerationParameters {","        parameters","    }","","    func getTextRequestBody(","        prompt: String,","        maxTokens: Int?,","        temperature: Double?,","        topP: Double?,","        topK: Int?,","        stopSequences: [String]?","    ) throws -> BedrockBodyCodable {","        guard topK == nil else {","            throw BedrockLibraryError.notSupported(\"TopK is not supported for Llama\")","        }","        guard stopSequences == nil else {","            throw BedrockLibraryError.notSupported(\"Stop sequences not supported for Llama\")","        }","        ","        return LlamaRequestBody(","            prompt: prompt,","            maxTokens: maxTokens ?? parameters.maxTokens.defaultValue,","            temperature: temperature ?? parameters.temperature.defaultValue","        )","    }","","    func getTextResponseBody(from data: Data) throws -> ContainsTextCompletion {","        let decoder = JSONDecoder()","        return try decoder.decode(LlamaResponseBody.self, from: data)","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Step 3: Create BedrockModel Instance","anchor":"Step-3-Create-BedrockModel-Instance","type":"heading"},{"code":["extension BedrockModel {","    public static let llama3_3_70b_instruct: BedrockModel = BedrockModel(","        id: \"meta.llama3-3-70b-instruct-v1:0\",","        name: \"Llama 3.3 70B Instruct\",","        modality: LlamaText(","            parameters: TextGenerationParameters(","                temperature: Parameter(.temperature, minValue: 0, maxValue: 1, defaultValue: 0.5),","                maxTokens: Parameter(.maxTokens, minValue: 0, maxValue: 2_048, defaultValue: 512),","                topP: Parameter(.topP, minValue: 0, maxValue: 1, defaultValue: 0.9),","                topK: Parameter.notSupported(.topK),","                stopSequences: StopSequenceParams.notSupported(),","                maxPromptSize: nil","            )","        )","    )","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Adding Image Generation Models","anchor":"Adding-Image-Generation-Models","type":"heading"},{"inlineContent":[{"text":"For image generation models, implement ","type":"text"},{"code":"ImageModality","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"level":3,"text":"Step 1: Create Request\/Response Structures","anchor":"Step-1-Create-RequestResponse-Structures","type":"heading"},{"code":["public struct AmazonImageRequestBody: BedrockBodyCodable {","    let taskType: TaskType","    private let textToImageParams: TextToImageParams?","    private let imageGenerationConfig: ImageGenerationConfig","","    public static func textToImage(","        prompt: String,","        negativeText: String?,","        nrOfImages: Int?,","        cfgScale: Double?,","        seed: Int?,","        quality: ImageQuality?,","        resolution: ImageResolution?","    ) -> Self {","        \/\/ Implementation details...","    }","}","","struct AmazonImageResponseBody: ContainsImageGeneration {","    let images: [String]","    ","    func getImageGenerationOutput() throws -> ImageGenerationOutput {","        ImageGenerationOutput(images: images)","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Step 2: Implement ImageModality","anchor":"Step-2-Implement-ImageModality","type":"heading"},{"code":["struct AmazonImage: ImageModality {","    let parameters: ImageGenerationParameters","    ","    func getName() -> String { \"Amazon Image Generation\" }","    ","    func getImageGenerationParameters() -> ImageGenerationParameters {","        parameters","    }","    ","    func hasTextToImageModality() -> Bool { true }","    func hasImageVariationModality() -> Bool { false }","    ","    func getTextToImageRequestBody(\/* parameters *\/) throws -> BedrockBodyCodable {","        \/\/ Implementation...","    }","    ","    func getImageResponseBody(from data: Data) throws -> ContainsImageGeneration {","        let decoder = JSONDecoder()","        return try decoder.decode(AmazonImageResponseBody.self, from: data)","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Hybrid Modalities","anchor":"Hybrid-Modalities","type":"heading"},{"inlineContent":[{"text":"For models supporting multiple capabilities, create custom modalities:","type":"text"}],"type":"paragraph"},{"code":["struct ModelFamilyModality: TextModality, ConverseModality {","    let parameters: TextGenerationParameters","    let converseFeatures: [ConverseFeature]","    let converseParameters: ConverseParameters","","    init(parameters: TextGenerationParameters, features: [ConverseFeature] = [.textGeneration]) {","        self.parameters = parameters","        self.converseFeatures = features","        self.converseParameters = ConverseParameters(textGenerationParameters: parameters)","    }","","    func getName() -> String { \"Model Family Text and Converse\" }","","    \/\/ Implement TextModality methods","    func getParameters() -> TextGenerationParameters { parameters }","    func getTextRequestBody(\/* ... *\/) throws -> BedrockBodyCodable { \/* ... *\/ }","    func getTextResponseBody(from data: Data) throws -> ContainsTextCompletion { \/* ... *\/ }","","    \/\/ Implement ConverseModality methods","    func getConverseParameters() -> ConverseParameters { converseParameters }","    func getConverseFeatures() -> [ConverseFeature] { converseFeatures }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Parameter Validation","anchor":"Parameter-Validation","type":"heading"},{"inlineContent":[{"text":"Define parameter constraints carefully:","type":"text"}],"type":"paragraph"},{"code":["\/\/ Supported parameter with range","Parameter(.temperature, minValue: 0.0, maxValue: 2.0, defaultValue: 1.0)","","\/\/ Supported parameter with no upper limit","Parameter(.maxTokens, minValue: 1, maxValue: nil, defaultValue: 1000)","","\/\/ Unsupported parameter","Parameter.notSupported(.topK)","","\/\/ Stop sequences with limits","StopSequenceParams(maxSequences: 4, defaultValue: [])","","\/\/ Stop sequences not supported","StopSequenceParams.notSupported()"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Testing New Models","anchor":"Testing-New-Models","type":"heading"},{"inlineContent":[{"text":"Test your model implementation:","type":"text"}],"type":"paragraph"},{"code":["func testNewModel() async throws {","    let bedrock = try await BedrockService()","    let model = BedrockModel.new_bedrock_model","    ","    \/\/ Test basic functionality","    if model.hasTextModality() {","        let completion = try await bedrock.completeText(\"Hello\", with: model)","        print(\"Text completion: \\(completion.completion)\")","    }","    ","    if model.hasConverseModality() {","        let builder = try ConverseRequestBuilder(with: model)","            .withPrompt(\"Hello\")","        let reply = try await bedrock.converse(with: builder)","        print(\"Converse reply: \\(reply)\")","    }","    ","    \/\/ Test parameter validation","    do {","        let _ = try await bedrock.completeText(","            \"Test\", ","            with: model, ","            temperature: 5.0 \/\/ Should fail if max is < 5.0","        )","    } catch BedrockServiceError.parameterOutOfRange(let param, let value, let range) {","        print(\"Expected parameter error: \\(param) = \\(value) not in \\(range)\")","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Best Practices","anchor":"Best-Practices","type":"heading"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Follow AWS Documentation","type":"text"}]},{"type":"text","text":": Check the official model documentation for exact request\/response formats"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Validate Parameters","type":"text"}]},{"type":"text","text":": Implement proper parameter validation based on model capabilities"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Handle Errors","type":"text"}]},{"type":"text","text":": Provide clear error messages for unsupported features"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Test Thoroughly","type":"text"}]},{"type":"text","text":": Test all supported features and parameter combinations"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Document Limitations","type":"text"}]},{"type":"text","text":": Clearly document what features are and aren’t supported"}],"type":"paragraph"}]}]}],"kind":"content"}],"sections":[],"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["https:\/\/docs.aws.amazon.com\/bedrock\/latest\/userguide\/model-parameters.html","https:\/\/docs.aws.amazon.com\/bedrock\/latest\/userguide\/conversation-inference-supported-models-features.html"]}],"abstract":[{"text":"Extend BedrockService with new foundation models","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bedrockservice\/addingmodels"]}],"identifier":{"url":"doc:\/\/BedrockService\/documentation\/BedrockService\/AddingModels","interfaceLanguage":"swift"},"references":{"doc://BedrockService/documentation/BedrockService":{"url":"\/documentation\/bedrockservice","images":[{"identifier":"bedrock.png","type":"icon"}],"type":"topic","kind":"symbol","title":"BedrockService","abstract":[{"text":"A Swift library for interacting with Amazon Bedrock foundation models","type":"text"}],"role":"collection","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService"},"https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html":{"url":"https:\/\/docs.aws.amazon.com\/bedrock\/latest\/userguide\/model-parameters.html","title":"AWS Bedrock Model Parameters","titleInlineContent":[{"text":"AWS Bedrock Model Parameters","type":"text"}],"identifier":"https:\/\/docs.aws.amazon.com\/bedrock\/latest\/userguide\/model-parameters.html","type":"link"},"https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference-supported-models-features.html":{"url":"https:\/\/docs.aws.amazon.com\/bedrock\/latest\/userguide\/conversation-inference-supported-models-features.html","title":"Converse API Supported Features","titleInlineContent":[{"text":"Converse API Supported Features","type":"text"}],"identifier":"https:\/\/docs.aws.amazon.com\/bedrock\/latest\/userguide\/conversation-inference-supported-models-features.html","type":"link"},"bedrock.png":{"alt":"BedrockService","identifier":"bedrock.png","variants":[{"url":"\/images\/BedrockService\/bedrock.png","traits":["1x","light"]}],"type":"image"}}}