{"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"BedrockService supports image generation and variation capabilities, allowing you to create images from text descriptions and generate variations of existing images.","type":"text"}]},{"level":2,"anchor":"Text-to-Image-Generation","text":"Text-to-Image Generation","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Generate images from text descriptions:"}]},{"type":"codeListing","code":["let model: BedrockModel = .nova_canvas","","guard model.hasImageModality(),","      model.hasTextToImageModality() else {","    throw MyError.incorrectModality(\"\\(model.name) does not support image generation\")","}","","let imageGeneration = try await bedrock.generateImage(","    \"A serene landscape with mountains at sunset\",","    with: model",")","","\/\/ Access generated images","for (index, image) in imageGeneration.images.enumerated() {","    print(\"Generated image \\(index + 1): \\(image.prefix(50))...\")","}"],"syntax":"swift"},{"level":2,"anchor":"Generation-Parameters","text":"Generation Parameters","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Control image generation with various parameters:"}]},{"type":"codeListing","syntax":"swift","code":["let imageGeneration = try await bedrock.generateImage(","    \"A futuristic city skyline at night\",","    with: model,","    negativePrompt: \"dark, gloomy, abandoned\",","    nrOfImages: 3,","    cfgScale: 7.0,","    seed: 42,","    quality: .standard,","    resolution: ImageResolution(width: 1024, height: 1024)",")"]},{"type":"heading","level":3,"anchor":"Available-Parameters","text":"Available Parameters"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"negativePrompt"}]},{"type":"text","text":": Describe what to avoid in the image"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"nrOfImages"}]},{"type":"text","text":": Number of images to generate (1-4 typically)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"cfgScale"}]},{"type":"text","text":": How closely to follow the prompt (1.0-20.0)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"seed"}]},{"type":"text","text":": For reproducible results"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"quality"}],"type":"strong"},{"type":"text","text":": Image quality setting ("},{"type":"codeVoice","code":".standard"},{"type":"text","text":", "},{"type":"codeVoice","code":".premium"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"resolution"}],"type":"strong"},{"text":": Output image dimensions","type":"text"}]}]}]},{"level":2,"anchor":"Image-Variations","text":"Image Variations","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create variations of existing images:"}]},{"type":"codeListing","code":["let model: BedrockModel = .nova_canvas","","guard model.hasImageModality(),","      model.hasImageVariationModality() else {","    throw MyError.incorrectModality(\"\\(model.name) does not support image variations\")","}","","let imageVariations = try await bedrock.generateImageVariation(","    images: [base64EncodedImage],","    prompt: \"A dog drinking from this teacup\",","    with: model",")"],"syntax":"swift"},{"level":2,"anchor":"Variation-Parameters","text":"Variation Parameters","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Fine-tune image variations:","type":"text"}]},{"type":"codeListing","code":["let imageVariations = try await bedrock.generateImageVariation(","    images: [base64EncodedImage],","    prompt: \"Transform this into a watercolor painting\",","    with: model,","    negativePrompt: \"photorealistic, sharp edges\",","    similarity: 0.8,","    nrOfVariations: 4,","    cfgScale: 7.0,","    seed: 123,","    quality: .premium,","    resolution: ImageResolution(width: 512, height: 512)",")"],"syntax":"swift"},{"anchor":"Variation-Specific-Parameters","level":3,"text":"Variation-Specific Parameters","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"similarity"}]},{"type":"text","text":": How similar variations should be to source (0.0-1.0)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"nrOfVariations"}]},{"type":"text","text":": Number of variations to create"}],"type":"paragraph"}]}]},{"level":2,"anchor":"Working-with-Image-Data","text":"Working with Image Data","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Handle base64-encoded image data:","type":"text"}]},{"type":"codeListing","code":["\/\/ Convert image file to base64","func loadImageAsBase64(from path: String) -> String? {","    guard let imageData = FileManager.default.contents(atPath: path) else {","        return nil","    }","    return imageData.base64EncodedString()","}","","\/\/ Save generated image","func saveBase64Image(_ base64String: String, to path: String) {","    guard let imageData = Data(base64Encoded: base64String) else {","        print(\"Invalid base64 data\")","        return","    }","    ","    do {","        try imageData.write(to: URL(fileURLWithPath: path))","        print(\"Image saved to \\(path)\")","    } catch {","        print(\"Failed to save image: \\(error)\")","    }","}","","\/\/ Usage","if let sourceImage = loadImageAsBase64(from: \"input.jpg\") {","    let variations = try await bedrock.generateImageVariation(","        images: [sourceImage],","        prompt: \"Make this image look like a vintage photograph\",","        with: model","    )","    ","    for (index, image) in variations.images.enumerated() {","        saveBase64Image(image, to: \"variation_\\(index).jpg\")","    }","}"],"syntax":"swift"},{"level":2,"anchor":"Model-Specific-Capabilities","text":"Model-Specific Capabilities","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Different models support different features:"}]},{"type":"codeListing","code":["\/\/ Check model capabilities","let model: BedrockModel = .nova_canvas","","if model.hasTextToImageModality() {","    print(\"Supports text-to-image generation\")","}","","if model.hasImageVariationModality() {","    print(\"Supports image variations\")","}","","\/\/ Get model-specific parameter limits","if let imageModality = model.modality as? ImageModality {","    let params = imageModality.getImageGenerationParameters()","    print(\"Max images: \\(params.nrOfImages.maxValue ?? \"unlimited\")\")","    print(\"CFG scale range: \\(params.cfgScale.minValue)-\\(params.cfgScale.maxValue ?? 20)\")","}"],"syntax":"swift"},{"level":2,"anchor":"Error-Handling","text":"Error Handling","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Handle common image generation errors:","type":"text"}]},{"type":"codeListing","code":["do {","    let images = try await bedrock.generateImage(","        \"A beautiful sunset over the ocean\",","        with: model,","        nrOfImages: 5 \/\/ Might exceed model limit","    )","} catch BedrockServiceError.parameterOutOfRange(let parameter, let value, let range) {","    print(\"Parameter \\(parameter) value \\(value) is outside allowed range: \\(range)\")","} catch BedrockServiceError.notSupported(let feature) {","    print(\"Feature not supported: \\(feature)\")","} catch {","    print(\"Image generation failed: \\(error)\")","}"],"syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/BedrockService\/documentation\/BedrockService"]]},"metadata":{"role":"article","modules":[{"name":"BedrockService"}],"title":"Image Generation","roleHeading":"Article"},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","abstract":[{"text":"Create and modify images with foundation models","type":"text"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bedrockservice\/imagegeneration"]}],"identifier":{"url":"doc:\/\/BedrockService\/documentation\/BedrockService\/ImageGeneration","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Related Documentation","anchor":"Related-Documentation","identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Vision","doc:\/\/BedrockService\/documentation\/BedrockService\/Converse"]},{"title":"Core Features","anchor":"Core-Features","identifiers":["doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","doc:\/\/BedrockService\/documentation\/BedrockService\/TextGeneration","doc:\/\/BedrockService\/documentation\/BedrockService\/Embeddings"],"generated":true}],"references":{"doc://BedrockService/documentation/BedrockService/Converse":{"title":"Converse API","url":"\/documentation\/bedrockservice\/converse","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Converse","type":"topic","role":"article","kind":"article","abstract":[{"text":"Build conversational AI applications with the Converse API","type":"text"}]},"doc://BedrockService/documentation/BedrockService":{"kind":"symbol","type":"topic","url":"\/documentation\/bedrockservice","abstract":[{"text":"A Swift library for interacting with Amazon Bedrock foundation models","type":"text"}],"role":"collection","title":"BedrockService","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService","images":[{"type":"icon","identifier":"bedrock.png"}]},"doc://BedrockService/documentation/BedrockService/Embeddings":{"title":"Embeddings","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Embeddings","url":"\/documentation\/bedrockservice\/embeddings","type":"topic","role":"article","abstract":[{"text":"Generate vector embeddings for semantic analysis","type":"text"}],"kind":"article"},"bedrock.png":{"variants":[{"url":"\/images\/BedrockService\/bedrock.png","traits":["1x","light"]}],"type":"image","identifier":"bedrock.png","alt":"BedrockService"},"doc://BedrockService/documentation/BedrockService/Vision":{"kind":"article","type":"topic","url":"\/documentation\/bedrockservice\/vision","abstract":[{"type":"text","text":"Add images to your conversations"}],"role":"article","title":"Vision","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/Vision"},"doc://BedrockService/documentation/BedrockService/TextGeneration":{"type":"topic","kind":"article","url":"\/documentation\/bedrockservice\/textgeneration","abstract":[{"type":"text","text":"Generate text using the InvokeModel API"}],"role":"article","title":"Text Generation","identifier":"doc:\/\/BedrockService\/documentation\/BedrockService\/TextGeneration"}}}